# Generated by Django 3.1.7 on 2021-09-06 12:34

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('permissions', models.TextField(default=None, null=True, verbose_name='permissions')),
                ('first_name', models.CharField(default=None, max_length=255, null=True, unique=True, verbose_name='first_name')),
                ('last_name', models.CharField(default=None, max_length=255, null=True, verbose_name='last_name')),
                ('last_login', models.DateTimeField(default=None, null=True, verbose_name='last_login')),
                ('created_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='updated_at')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Collections',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('encoding', models.CharField(max_length=255, verbose_name='encoding')),
                ('handler', models.CharField(max_length=255, verbose_name='handler')),
                ('created_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='updated_at')),
                ('owner_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'collections',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Documents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('external_name', models.CharField(max_length=255, verbose_name='external_name')),
                ('text', models.TextField(verbose_name='text')),
                ('type', models.CharField(default=None, max_length=128, null=True, verbose_name='type')),
                ('data_text', models.TextField(default=None, null=True, verbose_name='data_text')),
                ('data_binary', models.BinaryField(default=None, null=True, verbose_name='data_binary')),
                ('visualisation_options', models.TextField(default=None, null=True, verbose_name='visualisation_options')),
                ('metadata', models.TextField(default=None, null=True, verbose_name='metadata')),
                ('encoding', models.CharField(max_length=20, verbose_name='encoding')),
                ('handler', models.CharField(default=None, max_length=256, null=True, verbose_name='handler')),
                ('created_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='updated_at')),
                ('version', models.IntegerField(default=1, verbose_name='version')),
                ('updated_by', models.CharField(max_length=255, verbose_name='updated_by')),
                ('collection_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clarin_backend.collections')),
                ('owner_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'documents',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SharedCollections',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confirmed', models.SmallIntegerField(default=0, verbose_name='confirmed')),
                ('confirmation_code', models.CharField(default=None, max_length=255, null=True, verbose_name='confirmation_code')),
                ('created_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='updated_at')),
                ('collection_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clarin_backend.collections')),
                ('fromfield', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fromfield', to=settings.AUTH_USER_MODEL)),
                ('tofield', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tofield', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'shared_collections',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OpenDocuments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='updated_at')),
                ('db_interactions', models.IntegerField(verbose_name='db_interactions')),
                ('annotator_type', models.CharField(max_length=255, verbose_name='annotator_type')),
                ('collection_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clarin_backend.collections')),
                ('document_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clarin_backend.documents')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'open_documents',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreferenceAnnotators',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(default=None, max_length=255, null=True, verbose_name='language')),
                ('annotation_type', models.CharField(default=None, max_length=255, null=True, verbose_name='annotation_type')),
                ('alternative', models.CharField(default=None, max_length=255, null=True, verbose_name='alternative')),
                ('created_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='updated_at')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'coreference_annotators',
            },
        ),
        migrations.CreateModel(
            name='ButtonAnnotators',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(default=None, max_length=255, null=True, verbose_name='language')),
                ('annotation_type', models.CharField(default=None, max_length=255, null=True, verbose_name='annotation_type')),
                ('attribute', models.CharField(default=None, max_length=255, null=True, verbose_name='attribute')),
                ('alternative', models.CharField(default=None, max_length=255, null=True, verbose_name='alternative')),
                ('created_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='updated_at')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'button_annotators',
            },
        ),
    ]
